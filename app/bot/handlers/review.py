# app/bot/handlers/review.py

import aiohttp
import os
from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, ParseMode
from app.bot.bot import dp, storage
from app.bot.services.replies import send_user_reply
from app.bot.services.ui import send_main_menu

BACKEND_URL = os.getenv('BACKEND_URL', 'http://backend:8000')

@dp.message_handler(lambda message: message.text in ["–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤", "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É"])
async def handle_review_actions(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    user_data = await storage.get_data(chat=chat_id, user=user_id)

    loading_message = await message.answer("ü§ñ–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ‚Ä¶ \n‚ú®–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç‚Ä¶ ")

    account_id = user_data.get('selected_account_id')
    if not account_id:
        await message.bot.delete_message(chat_id=chat_id, message_id=loading_message.message_id)
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –≤—ã–±–æ—Ä–∞.")
        return

    page_token = None
    if "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É" in message.text:
        page_token = user_data.get('next_page_token')

    params = {'telegram_id': user_id, 'account_id': account_id}
    if page_token:
        params['page_token'] = page_token

    async with aiohttp.ClientSession() as session:
        async with session.get(f"{BACKEND_URL}/get_review", params=params) as resp:
            await message.bot.delete_message(chat_id=chat_id, message_id=loading_message.message_id)

            if resp.status == 200:
                data = await resp.json()
                review = data.get('review')
                reply = data.get('reply')
                review_id = data.get('review_id')
                new_next_page_token = data.get('next_page_token')

                if review_id:
                    user_data['review'] = review
                    user_data['suggested_reply'] = reply
                    user_data['review_id'] = review_id
                    user_data['next_page_token'] = new_next_page_token
                    user_data['current_mode'] = None
                    await storage.update_data(chat=chat_id, user=user_id, data=user_data)

                    await message.answer(f"**–û—Ç–∑—ã–≤:**\n\n{review}", parse_mode=ParseMode.MARKDOWN)
                    await message.answer(f"**–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç:**\n\n{reply}", parse_mode=ParseMode.MARKDOWN)

                    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
                    keyboard.add("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç", "–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç")
                    keyboard.add("–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É")
                    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
                else:
                    await message.answer("–ë–æ–ª—å—à–µ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.")
                    user_data['current_mode'] = None
                    await storage.update_data(chat=chat_id, user=user_id, data=user_data)
                    await send_main_menu(user_id, user_data.get('marketplace'))
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message_handler(lambda message: message.text in ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç", "–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç"])
async def handle_reply_choice(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    user_data = await storage.get_data(chat=chat_id, user=user_id)

    if message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç":
        suggested_reply = user_data.get('suggested_reply')
        if suggested_reply is None:
            await message.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤.")
            return

        success = await send_user_reply(message, suggested_reply)
        if success:
            await message.answer("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç.")
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        user_data['current_mode'] = None
        await storage.update_data(chat=chat_id, user=user_id, data=user_data)
        await send_main_menu(user_id, user_data.get('marketplace'))

    elif message.text == "–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç":
        user_data['current_mode'] = 'waiting_for_custom_reply'
        await storage.update_data(chat=chat_id, user=user_id, data=user_data)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤.")

@dp.message_handler(lambda message: message.text in ["–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", "–ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å"])
async def process_confirmation(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    user_data = await storage.get_data(chat=chat_id, user=user_id)

    if user_data.get('current_mode') == 'confirming_reply':
        if message.text == "–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å":
            custom_reply = user_data.get('custom_reply')
            success = await send_user_reply(message, custom_reply)
            if success:
                await message.answer("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç.")
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

            user_data['current_mode'] = None
            await storage.update_data(chat=chat_id, user=user_id, data=user_data)
            await send_main_menu(user_id, user_data.get('marketplace'))

        elif message.text == "–ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å":
            user_data['current_mode'] = 'waiting_for_custom_reply'
            await storage.update_data(chat=chat_id, user=user_id, data=user_data)
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤.")
    else:
        await message.answer("–°–µ–π—á–∞—Å –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message_handler(lambda message: True)
async def process_custom_reply(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    user_data = await storage.get_data(chat=chat_id, user=user_id)

    if user_data.get('current_mode') == 'waiting_for_custom_reply':
        custom_reply = message.text
        user_data['custom_reply'] = custom_reply
        user_data['current_mode'] = 'confirming_reply'
        await storage.update_data(chat=chat_id, user=user_id, data=user_data)

        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", "–ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å")

        await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç?\n\n{custom_reply}", reply_markup=keyboard)
    else:
        await message.answer("–°–µ–π—á–∞—Å –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç–≤–µ—Ç.")