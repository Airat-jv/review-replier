# bot.py

import os
import aiohttp
import json
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import BotCommand, ParseMode, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
BACKEND_URL = os.getenv('BACKEND_URL', 'http://backend:8000')
EXTERNAL_BACKEND_URL = os.getenv('EXTERNAL_BACKEND_URL')
BOT_USERNAME = os.getenv('BOT_USERNAME')

if not TELEGRAM_TOKEN:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN")

bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ–∑–¥–∞–¥–∏–º –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
class ReviewStates(StatesGroup):
    waiting_for_custom_reply = State()
    confirming_reply = State()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async def set_default_commands(dp):
    await bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("help", "–ü–æ–º–æ—â—å")
    ])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def check_authorization(telegram_id):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{BACKEND_URL}/is_authorized", params={
            'telegram_id': telegram_id
        }) as resp:
            if resp.status == 200:
                data = await resp.json()
                return data.get('authorized', False)
            else:
                return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async def get_user_info(telegram_id):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{BACKEND_URL}/user_info", params={
            'telegram_id': telegram_id
        }) as resp:
            if resp.status == 200:
                data = await resp.json()
                return data
            else:
                return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
async def generate_token(telegram_id):
    async with aiohttp.ClientSession() as session:
        async with session.post(f"{BACKEND_URL}/generate_token", json={
            'telegram_id': telegram_id
        }) as resp:
            if resp.status == 200:
                data = await resp.json()
                return data.get('token')
            else:
                return ''

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –∏ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_marketplace_accounts(telegram_id):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{BACKEND_URL}/get_user_marketplace_accounts", params={
            'telegram_id': telegram_id
        }) as resp:
            if resp.status == 200:
                data = await resp.json()
                return data.get('accounts', [])
            else:
                return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–±–æ—Ä–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
async def send_marketplace_selection(chat_id):
    accounts = await get_user_marketplace_accounts(chat_id)
    if not accounts:
        await bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–±–∏–Ω–µ—Ç—ã —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start.")
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞–±–∏–Ω–µ—Ç—ã –ø–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º
    marketplaces = {}
    for account in accounts:
        mp = account['marketplace']
        if mp not in marketplaces:
            marketplaces[mp] = []
        marketplaces[mp].append(account)

    keyboard = InlineKeyboardMarkup(row_width=1)
    for mp, accs in marketplaces.items():
        if len(accs) == 1:
            # –ï—Å–ª–∏ –æ–¥–∏–Ω –∫–∞–±–∏–Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ä–∞–∑—É –¥–ª—è –Ω–µ–≥–æ
            callback_data = f"select_account:{accs[0]['id']}"
            button = InlineKeyboardButton(text=f"{mp} - {accs[0]['account_name']}", callback_data=callback_data)
            keyboard.add(button)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–±–∏–Ω–µ—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–±–∏–Ω–µ—Ç–∞
            callback_data = f"choose_account:{mp}"
            button = InlineKeyboardButton(text=f"{mp}", callback_data=callback_data)
            keyboard.add(button)
    await delete_previous_bot_message(chat_id)
    sent_message = await bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –∏–ª–∏ –∫–∞–±–∏–Ω–µ—Ç:", reply_markup=keyboard)
    await storage.update_data(user=chat_id, data={'last_bot_message_id': sent_message.message_id})

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞
@dp.callback_query_handler(lambda c: c.data.startswith('choose_account:'))
async def process_choose_account(callback_query: types.CallbackQuery):
    marketplace = callback_query.data.split(':')[1]
    accounts = await get_user_marketplace_accounts(callback_query.from_user.id)
    accounts = [acc for acc in accounts if acc['marketplace'] == marketplace]
    keyboard = InlineKeyboardMarkup(row_width=1)
    for acc in accounts:
        callback_data = f"select_account:{acc['id']}"
        button = InlineKeyboardButton(text=acc['account_name'], callback_data=callback_data)
        keyboard.add(button)
    await delete_previous_bot_message(callback_query.from_user.id)
    sent_message = await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç:", reply_markup=keyboard)
    await storage.update_data(user=callback_query.from_user.id, data={'last_bot_message_id': sent_message.message_id})
    await callback_query.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞
@dp.callback_query_handler(lambda c: c.data.startswith('select_account:'))
async def process_select_account(callback_query: types.CallbackQuery):
    account_id = int(callback_query.data.split(':')[1])
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
    await storage.update_data(user=callback_query.from_user.id, data={'selected_account_id': account_id})

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–±–∏–Ω–µ—Ç–µ
    accounts = await get_user_marketplace_accounts(callback_query.from_user.id)
    # –ò—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ account_id
    account_info = next((acc for acc in accounts if acc['id'] == account_id), None)

    if account_info:
        account_name = account_info.get('account_name')
        marketplace = account_info.get('marketplace')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º marketplace –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await storage.update_data(user=callback_query.from_user.id, data={'marketplace': marketplace})

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞–±–∏–Ω–µ—Ç–∞ –∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
        await delete_previous_bot_message(callback_query.from_user.id)
        await bot.send_message(
            chat_id=callback_query.from_user.id,
            text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞–±–∏–Ω–µ—Ç *{account_name}* –Ω–∞ *{marketplace}*.",
            parse_mode=ParseMode.MARKDOWN
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –æ—Ç–∑—ã–≤" –∏ –∏–∫–æ–Ω–∫–æ–π
        await send_main_menu(callback_query.from_user.id, marketplace)
    else:
        await bot.send_message(
            chat_id=callback_query.from_user.id,
            text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ."
        )
    await callback_query.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def send_main_menu(user_id: int, marketplace: str):
    # –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É
    icon = get_marketplace_icon(marketplace)

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    button_text = f"–ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –æ—Ç–∑—ã–≤ {icon}"
    keyboard.add(button_text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.send_message(
        chat_id=user_id,
        text="–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
async def delete_previous_bot_message(chat_id):
    user_data = await storage.get_data(user=chat_id)
    last_message_id = user_data.get('last_bot_message_id')
    if last_message_id:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=last_message_id)
        except:
            pass  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
def get_marketplace_icon(marketplace):
    icons = {
        '–Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç': 'üü°',
        'OZON': 'üîµ',
        'Wildberries': 'üü£'
    }
    return icons.get(marketplace, '')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'], state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –≤—ã–∑–≤–∞–Ω")
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    is_authorized = await check_authorization(message.from_user.id)
    await delete_previous_bot_message(message.chat.id)  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if is_authorized:
        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å:", reply_markup=types.ReplyKeyboardRemove())

        user_info = await get_user_info(message.from_user.id)
        name = user_info.get('name', '')
        auth_token = user_info.get('auth_token', '')
        if not auth_token:
            auth_token = await generate_token(message.from_user.id)
        greeting = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *ReviewReplierBot*!\n\n"
        welcome_text = (
            f"{greeting}"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤–∞–º–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–µ–∂–∏–µ –æ—Ç–∑—ã–≤—ã –∏ –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–∏—Ö —Å –ø–æ–º–æ—â—å—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ChatGPT.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
        keyboard = InlineKeyboardMarkup(row_width=1)
        buttons = [
            InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å", callback_data="choose_marketplace"),
            InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏", url=f"{EXTERNAL_BACKEND_URL}/add_marketplace?token={auth_token}"),
            InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")
        ]
        keyboard.add(*buttons)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        with open('welcome_image.jpg', 'rb') as photo:
            sent_message = await message.answer_photo(
                photo,
                caption=welcome_text,
                parse_mode=types.ParseMode.MARKDOWN,
                reply_markup=keyboard
            )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
        await storage.update_data(user=message.from_user.id, data={'last_bot_message_id': sent_message.message_id})
    else:
        token = await generate_token(message.from_user.id)
        keyboard = InlineKeyboardMarkup(row_width=1)
        buttons = [
            InlineKeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", url=f"{EXTERNAL_BACKEND_URL}/auth?token={token}"),
            InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")
        ]
        keyboard.add(*buttons)
        sent_message = await message.answer(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.",
            reply_markup=keyboard
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
        await storage.update_data(user=message.from_user.id, data={'last_bot_message_id': sent_message.message_id})

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    await delete_previous_bot_message(message.chat.id)  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    help_text = (
        "‚ÑπÔ∏è *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*\n\n"
        "üîπ *–ö–∞–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è?*\n"
        "‚Äî –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è' –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n\n"
        "üîπ *–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å?*\n"
        "‚Äî –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å' –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n\n"
        "üîπ *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –æ—Ç–∑—ã–≤?*\n"
        "‚Äî –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –æ—Ç–∑—ã–≤'.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    sent_message = await message.answer(help_text, parse_mode=types.ParseMode.MARKDOWN)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
    await storage.update_data(user=message.from_user.id, data={'last_bot_message_id': sent_message.message_id})

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda c: True)
async def process_callback(callback_query: types.CallbackQuery):
    data = callback_query.data
    if data == 'choose_marketplace':
        await send_marketplace_selection(callback_query.from_user.id)
    elif data == 'help':
        await cmd_help(callback_query.message)
    elif data.startswith('select_marketplace:'):
        marketplace = data.split(':')[1]
        await process_marketplace_selection(callback_query, marketplace)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
async def process_marketplace_selection(callback_query: types.CallbackQuery, marketplace: str):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
    await storage.update_data(user=callback_query.from_user.id, data={'selected_marketplace': marketplace})
    # –°–æ–∑–¥–∞—ë–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –æ—Ç–∑—ã–≤"
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_text = f"–ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –æ—Ç–∑—ã–≤ {get_marketplace_icon(marketplace)}"
    keyboard.add(button_text)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await delete_previous_bot_message(callback_query.from_user.id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    sent_message = await bot.send_message(
        chat_id=callback_query.from_user.id,
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {marketplace}",
        reply_markup=keyboard
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
    await storage.update_data(user=callback_query.from_user.id, data={'last_bot_message_id': sent_message.message_id})

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ç–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∫–∞–±–∏–Ω–µ—Ç
@dp.callback_query_handler(lambda c: c.data.startswith('choose_marketplace:'))
async def process_choose_marketplace(callback_query: types.CallbackQuery):
    marketplace = callback_query.data.split(':')[1]
    accounts = await get_user_marketplace_accounts(callback_query.from_user.id)
    accounts = [acc for acc in accounts if acc['marketplace'] == marketplace]

    if accounts:
        keyboard = InlineKeyboardMarkup(row_width=1)
        for acc in accounts:
            callback_data = f"select_account:{acc['id']}"
            button = InlineKeyboardButton(text=acc['account_name'], callback_data=callback_data)
            keyboard.add(button)
        await delete_previous_bot_message(callback_query.from_user.id)
        sent_message = await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç:", reply_markup=keyboard)
        await storage.update_data(user=callback_query.from_user.id, data={'last_bot_message_id': sent_message.message_id})
    else:
        await bot.send_message(callback_query.from_user.id, "–£ –≤–∞—Å –Ω–µ—Ç –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ.")
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –æ—Ç–∑—ã–≤"
@dp.message_handler(lambda message: message.text.startswith("–ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –æ—Ç–∑—ã–≤"))
async def get_fresh_review(message: types.Message, state: FSMContext):
    user_data = await storage.get_data(user=message.from_user.id)
    account_id = user_data.get('selected_account_id')
    if not account_id:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –≤—ã–±–æ—Ä–∞.")
        return
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{BACKEND_URL}/get_review", params={
            'telegram_id': message.from_user.id,
            'account_id': account_id
        }) as resp:
            if resp.status == 200:
                data = await resp.json()
                review = data.get('review')
                reply = data.get('reply')
                review_id = data.get('review_id')  # –ü–æ–ª—É—á–∞–µ–º review_id –∏–∑ –æ—Ç–≤–µ—Ç–∞

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await message.answer(f"**–°–≤–µ–∂–∏–π –æ—Ç–∑—ã–≤:**\n\n{review}", parse_mode=ParseMode.MARKDOWN)

                # –£–≤–µ–¥–æ–º–ª—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å –ø—Ä–∏—à–ª—ë–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
#                 await message.answer("–°–µ–π—á–∞—Å –ø—Ä–∏—à–ª—ë–º –≤–∞–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é –æ—Ç–≤–µ—Ç. –ï—Å–ª–∏ –æ–Ω –≤–∞—Å —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç, –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç' –∏–ª–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π.")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                await message.answer(f"**–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç:**\n\n{reply}", parse_mode=ParseMode.MARKDOWN)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –≤–∫–ª—é—á–∞—è review_id
                await state.update_data(
                    review=review,
                    suggested_reply=reply,
                    account_id=account_id,
                    review_id=review_id  # –ó–¥–µ—Å—å –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º review_id
                )

                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                keyboard.add("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç", "–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç")
                keyboard.add("–û—Ç–º–µ–Ω–∞")

                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ 
@dp.message_handler(lambda message: message.text in ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç", "–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç"])
async def handle_reply_choice(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    if message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        await send_user_reply(message, state, user_data['suggested_reply'])
    elif message.text == "–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤.")
        await ReviewStates.waiting_for_custom_reply.set()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
async def send_user_reply(message: types.Message, state: FSMContext, reply_text: str):
    user_data = await state.get_data()
    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥
    success = await send_reply_to_marketplace(
        telegram_id=message.from_user.id,
        account_id=user_data['account_id'],
        review_id=user_data['review_id'],
        reply=reply_text
    )
    if success:
        await message.answer("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç.")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    await state.finish()
    await send_main_menu(message, user_data.get('marketplace'))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
@dp.message_handler(state=ReviewStates.waiting_for_custom_reply)
async def process_custom_reply(message: types.Message, state: FSMContext):
    custom_reply = message.text
    await state.update_data(custom_reply=custom_reply)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", "–ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å")
    keyboard.add("–û—Ç–º–µ–Ω–∞")

    await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç?\n\n{custom_reply}", reply_markup=keyboard)
    await ReviewStates.confirming_reply.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@dp.message_handler(lambda message: message.text in ["–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", "–ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å"], state=ReviewStates.confirming_reply)
async def process_confirmation(message: types.Message, state: FSMContext):
    if message.text == "–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å":
        user_data = await state.get_data()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç–≤–µ—Ç
        await send_user_reply(message, state, user_data['custom_reply'])
    elif message.text == "–ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤.")
        await ReviewStates.waiting_for_custom_reply.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–û—Ç–º–µ–Ω–∞"
@dp.message_handler(lambda message: message.text == "–û—Ç–º–µ–Ω–∞", state='*')
async def cancel_action(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    user_data = await storage.get_data(user=message.from_user.id)
    await send_main_menu(message, user_data.get('marketplace'))

###

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_query
@dp.callback_query_handler(lambda c: c.data in ['send_suggested_reply', 'write_custom_reply'])
async def process_callback_buttons(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    user_data = await state.get_data()

    review_id = user_data.get('review_id')  # –ü–æ–ª—É—á–∞–µ–º review_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    if data == 'send_suggested_reply':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç
        await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç...")
        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥
        success = await send_reply_to_marketplace(
            telegram_id=callback_query.from_user.id,
            account_id=user_data['account_id'],
            review_id=review_id,  # –ü–µ—Ä–µ–¥–∞—ë–º review_id
            reply=user_data['suggested_reply']
        )
        if success:
            await callback_query.message.answer("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç.")
        else:
            await callback_query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    elif data == 'write_custom_reply':
        await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤.")
        await ReviewStates.waiting_for_custom_reply.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
@dp.message_handler(state=ReviewStates.waiting_for_custom_reply)
async def process_custom_reply(message: types.Message, state: FSMContext):
    custom_reply = message.text
    await state.update_data(custom_reply=custom_reply)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_send_reply")
    )
    keyboard.add(
        InlineKeyboardButton("–ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_reply")
    )

    await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç?\n\n{custom_reply}", reply_markup=keyboard)
    await ReviewStates.confirming_reply.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
@dp.callback_query_handler(state=ReviewStates.confirming_reply)
async def process_confirmation(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    user_data = await state.get_data()

    if data == 'confirm_send_reply':
        await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—à –æ—Ç–≤–µ—Ç...")
        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥
        success = await send_reply_to_marketplace(
            telegram_id=callback_query.from_user.id,
            account_id=user_data['account_id'],
            review=user_data['review'],
            reply=user_data['custom_reply']
        )
        if success:
            await callback_query.message.answer("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç.")
        else:
            await callback_query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.finish()

    elif data == 'edit_reply':
        await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤.")
        await ReviewStates.waiting_for_custom_reply.set()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç
async def send_reply_to_marketplace(telegram_id: int, account_id: int, review_id: int, reply: str) -> bool:
    async with aiohttp.ClientSession() as session:
        async with session.post(f"{BACKEND_URL}/send_reply", json={
            'telegram_id': telegram_id,
            'account_id': account_id,
            'review_id': review_id,  # –ü–µ—Ä–µ–¥–∞—ë–º review_id
            'reply': reply
        }) as resp:
            if resp.status == 200:
                return True
            else:
                return False

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

