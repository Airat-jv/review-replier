import os
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
if not TELEGRAM_TOKEN:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Form(StatesGroup):
    choosing_marketplace = State()
    entering_api_key = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–í—ã–±—Ä–∞—Ç—å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å", "–ü–æ–º–æ—â—å"]
    keyboard.add(*buttons)
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤–∞–º–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö.",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å" –ø–æ—Å–ª–µ /start
@dp.message_handler(lambda message: message.text == "–ü–æ–º–æ—â—å")
async def process_help_button(message: types.Message):
    await cmd_help(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    help_text = (
        "‚ÑπÔ∏è *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*\n\n"
        "üîπ *–ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º?*\n"
        "‚Äî –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å' –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n\n"
        "üîπ *–ö–∞–∫ –≤–≤–µ—Å—Ç–∏ API-–∫–ª—é—á?*\n"
        "‚Äî –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤–≤–µ—Å—Ç–∏ –≤–∞—à API-–∫–ª—é—á.\n\n"
        "üîπ *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –æ—Ç–∑—ã–≤?*\n"
        "‚Äî –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –æ—Ç–∑—ã–≤' –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ API-–∫–ª—é—á–∞.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    await message.answer(help_text, parse_mode=types.ParseMode.MARKDOWN)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å"
@dp.message_handler(lambda message: message.text == "–í—ã–±—Ä–∞—Ç—å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å")
async def choose_marketplace(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç", "OZON", "Wildberries"]
    keyboard.add(*buttons)
    await Form.choosing_marketplace.set()
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
@dp.message_handler(state=Form.choosing_marketplace)
async def process_marketplace(message: types.Message, state: FSMContext):
    marketplace = message.text
    if marketplace not in ["–Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç", "OZON", "Wildberries"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(chosen_marketplace=marketplace)
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {marketplace}")

    if marketplace != "–Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç":
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç.")
        return

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É API-–∫–ª—é—á–∞
    await Form.next()
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à API-–∫–ª—é—á –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç–∞:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ API-–∫–ª—é—á–∞
@dp.message_handler(state=Form.entering_api_key)
async def process_api_key(message: types.Message, state: FSMContext):
    api_key = message.text
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é API-–∫–ª—é—á–∞
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º API-–∫–ª—é—á –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–ª–∏ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await state.update_data(api_key=api_key)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ (–≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)
    user_data = await state.get_data()
    marketplace = user_data.get('chosen_marketplace')

    await message.answer(f"–í–∞—à API-–∫–ª—é—á –¥–ª—è {marketplace} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –æ—Ç–∑—ã–≤
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –æ—Ç–∑—ã–≤"]
    keyboard.add(*buttons)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –æ—Ç–∑—ã–≤.", reply_markup=keyboard)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –æ—Ç–∑—ã–≤"
@dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –æ—Ç–∑—ã–≤")
async def get_fresh_review(message: types.Message, state: FSMContext):
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å API-–∫–ª—é—á –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º MemoryStorage, –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    user_data = await state.get_data()
    api_key = user_data.get('api_key')
    if not api_key:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –≤–≤–µ–ª–∏ API-–∫–ª—é—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –∏ –≤–≤–µ–¥–∏—Ç–µ API-–∫–ª—é—á.")
        return

    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º api_key
    # –ü–æ–∫–∞ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É
    await message.answer("–í–æ—Ç –≤–∞—à —Å–≤–µ–∂–∏–π –æ—Ç–∑—ã–≤: ...")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
