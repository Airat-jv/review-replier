# bot.py

import os
import aiohttp
import json
from aiogram import Bot, Dispatcher, types
from aiogram.types import BotCommand, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
BACKEND_URL = os.getenv('BACKEND_URL', 'http://backend:8000')
EXTERNAL_BACKEND_URL = os.getenv('EXTERNAL_BACKEND_URL')
BOT_USERNAME = os.getenv('BOT_USERNAME')

if not TELEGRAM_TOKEN:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN")

bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async def set_default_commands(dp):
    await bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("help", "–ü–æ–º–æ—â—å")
    ])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def check_authorization(telegram_id):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{BACKEND_URL}/is_authorized", params={
            'telegram_id': telegram_id
        }) as resp:
            if resp.status == 200:
                data = await resp.json()
                return data.get('authorized', False)
            else:
                return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async def get_user_info(telegram_id):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{BACKEND_URL}/user_info", params={
            'telegram_id': telegram_id
        }) as resp:
            if resp.status == 200:
                data = await resp.json()
                return data
            else:
                return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
async def generate_token(telegram_id):
    async with aiohttp.ClientSession() as session:
        async with session.post(f"{BACKEND_URL}/generate_token", json={
            'telegram_id': telegram_id
        }) as resp:
            if resp.status == 200:
                data = await resp.json()
                return data.get('token')
            else:
                return ''

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –∏ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_marketplace_accounts(telegram_id):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{BACKEND_URL}/get_user_marketplace_accounts", params={
            'telegram_id': telegram_id
        }) as resp:
            if resp.status == 200:
                data = await resp.json()
                return data.get('accounts', [])
            else:
                return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–±–æ—Ä–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
async def send_marketplace_selection(chat_id):
    accounts = await get_user_marketplace_accounts(chat_id)
    if not accounts:
        await bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–±–∏–Ω–µ—Ç—ã —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start.")
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞–±–∏–Ω–µ—Ç—ã –ø–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º
    marketplaces = {}
    for account in accounts:
        mp = account['marketplace']
        if mp not in marketplaces:
            marketplaces[mp] = []
        marketplaces[mp].append(account)

    keyboard = InlineKeyboardMarkup(row_width=1)
    for mp, accs in marketplaces.items():
        if len(accs) == 1:
            # –ï—Å–ª–∏ –æ–¥–∏–Ω –∫–∞–±–∏–Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ä–∞–∑—É –¥–ª—è –Ω–µ–≥–æ
            callback_data = f"select_account:{accs[0]['id']}"
            button = InlineKeyboardButton(text=f"{mp} - {accs[0]['account_name']}", callback_data=callback_data)
            keyboard.add(button)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–±–∏–Ω–µ—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–±–∏–Ω–µ—Ç–∞
            callback_data = f"choose_account:{mp}"
            button = InlineKeyboardButton(text=f"{mp}", callback_data=callback_data)
            keyboard.add(button)
    await delete_previous_bot_message(chat_id)
    sent_message = await bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –∏–ª–∏ –∫–∞–±–∏–Ω–µ—Ç:", reply_markup=keyboard)
    await storage.update_data(user=chat_id, data={'last_bot_message_id': sent_message.message_id})

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞
@dp.callback_query_handler(lambda c: c.data.startswith('choose_account:'))
async def process_choose_account(callback_query: types.CallbackQuery):
    marketplace = callback_query.data.split(':')[1]
    accounts = await get_user_marketplace_accounts(callback_query.from_user.id)
    accounts = [acc for acc in accounts if acc['marketplace'] == marketplace]
    keyboard = InlineKeyboardMarkup(row_width=1)
    for acc in accounts:
        callback_data = f"select_account:{acc['id']}"
        button = InlineKeyboardButton(text=acc['account_name'], callback_data=callback_data)
        keyboard.add(button)
    await delete_previous_bot_message(callback_query.from_user.id)
    sent_message = await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç:", reply_markup=keyboard)
    await storage.update_data(user=callback_query.from_user.id, data={'last_bot_message_id': sent_message.message_id})
    await callback_query.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞
@dp.callback_query_handler(lambda c: c.data.startswith('select_account:'))
async def process_select_account(callback_query: types.CallbackQuery):
    account_id = int(callback_query.data.split(':')[1])
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
    await storage.update_data(user=callback_query.from_user.id, data={'selected_account_id': account_id})
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏)
    # ...
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_text = "–ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –æ—Ç–∑—ã–≤"
    keyboard.add(button_text)
    await delete_previous_bot_message(callback_query.from_user.id)
    sent_message = await bot.send_message(
        chat_id=callback_query.from_user.id,
        text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞–±–∏–Ω–µ—Ç.",
        reply_markup=keyboard
    )
    await storage.update_data(user=callback_query.from_user.id, data={'last_bot_message_id': sent_message.message_id})
    await callback_query.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
async def delete_previous_bot_message(chat_id):
    user_data = await storage.get_data(user=chat_id)
    last_message_id = user_data.get('last_bot_message_id')
    if last_message_id:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=last_message_id)
        except:
            pass  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
def get_marketplace_icon(marketplace):
    icons = {
        '–Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç': 'üü°',
        'OZON': 'üîµ',
        'Wildberries': 'üü£'
    }
    return icons.get(marketplace, '')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    is_authorized = await check_authorization(message.from_user.id)
    await delete_previous_bot_message(message.chat.id)  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if is_authorized:
        user_info = await get_user_info(message.from_user.id)
        name = user_info.get('name', '')
        auth_token = user_info.get('auth_token', '')
        if not auth_token:
            auth_token = await generate_token(message.from_user.id)
        greeting = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *ReviewReplierBot*!\n\n"
        welcome_text = (
            f"{greeting}"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤–∞–º–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–µ–∂–∏–µ –æ—Ç–∑—ã–≤—ã –∏ –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–∏—Ö —Å –ø–æ–º–æ—â—å—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ChatGPT.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
        )
        keyboard = InlineKeyboardMarkup(row_width=1)
        buttons = [
            InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å", callback_data="choose_marketplace"),
            InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏", url=f"{EXTERNAL_BACKEND_URL}/add_marketplace?token={auth_token}"),
            InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")
        ]
        keyboard.add(*buttons)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        with open('welcome_image.jpg', 'rb') as photo:
            sent_message = await message.answer_photo(
                photo,
                caption=welcome_text,
                parse_mode=types.ParseMode.MARKDOWN,
                reply_markup=keyboard
            )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
        await storage.update_data(user=message.from_user.id, data={'last_bot_message_id': sent_message.message_id})
    else:
        token = await generate_token(message.from_user.id)
        keyboard = InlineKeyboardMarkup(row_width=1)
        buttons = [
            InlineKeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", url=f"{EXTERNAL_BACKEND_URL}/auth?token={token}"),
            InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")
        ]
        keyboard.add(*buttons)
        sent_message = await message.answer(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.",
            reply_markup=keyboard
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
        await storage.update_data(user=message.from_user.id, data={'last_bot_message_id': sent_message.message_id})

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    await delete_previous_bot_message(message.chat.id)  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    help_text = (
        "‚ÑπÔ∏è *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*\n\n"
        "üîπ *–ö–∞–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è?*\n"
        "‚Äî –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è' –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n\n"
        "üîπ *–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å?*\n"
        "‚Äî –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å' –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n\n"
        "üîπ *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –æ—Ç–∑—ã–≤?*\n"
        "‚Äî –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –æ—Ç–∑—ã–≤'.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    sent_message = await message.answer(help_text, parse_mode=types.ParseMode.MARKDOWN)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
    await storage.update_data(user=message.from_user.id, data={'last_bot_message_id': sent_message.message_id})

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda c: True)
async def process_callback(callback_query: types.CallbackQuery):
    data = callback_query.data
    if data == 'choose_marketplace':
        await send_marketplace_selection(callback_query.from_user.id)
    elif data == 'help':
        await cmd_help(callback_query.message)
    elif data.startswith('select_marketplace:'):
        marketplace = data.split(':')[1]
        await process_marketplace_selection(callback_query, marketplace)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
async def process_marketplace_selection(callback_query: types.CallbackQuery, marketplace: str):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
    await storage.update_data(user=callback_query.from_user.id, data={'selected_marketplace': marketplace})
    # –°–æ–∑–¥–∞—ë–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –æ—Ç–∑—ã–≤"
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_text = f"–ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –æ—Ç–∑—ã–≤ {get_marketplace_icon(marketplace)}"
    keyboard.add(button_text)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await delete_previous_bot_message(callback_query.from_user.id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    sent_message = await bot.send_message(
        chat_id=callback_query.from_user.id,
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {marketplace}",
        reply_markup=keyboard
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
    await storage.update_data(user=callback_query.from_user.id, data={'last_bot_message_id': sent_message.message_id})

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –æ—Ç–∑—ã–≤"
@dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –æ—Ç–∑—ã–≤")
async def get_fresh_review(message: types.Message):
    user_data = await storage.get_data(user=message.from_user.id)
    account_id = user_data.get('selected_account_id')
    if not account_id:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –≤—ã–±–æ—Ä–∞.")
        return
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{BACKEND_URL}/get_review", params={
            'telegram_id': message.from_user.id,
            'account_id': account_id
        }) as resp:
            if resp.status == 200:
                data = await resp.json()
                review = data.get('review')
                await message.answer(f"–°–≤–µ–∂–∏–π –æ—Ç–∑—ã–≤:\n\n{review}")
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True, on_startup=set_default_commands)
